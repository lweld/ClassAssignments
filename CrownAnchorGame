'''This program simulates the betting game, Crown & Anchor.'''

import random

def main():
    Players = num_users() #collects a dictionary of players
    UserBet = make_bets(Players) #collects each player's bet
    bigSlot = rand_slot() #collects the round's list of randomly generated slots
    occurances = counting(UserBet, bigSlot) #collects the list of the number of times each round a user's symbol bet matches what was generated in the random slot
    calculation_winnings(UserBet, Players, occurances) #collects the list of the amount each user won
    Players = calculation_players(UserBet, Players, occurances) #collects the Players dictionary with the updated user balance
    repeat(Players, UserBet, bigSlot, occurances) #calls the repeat function which continually re-executes the program

def num_users(): #determines the number of users playing
    try:
        Users = int(input("How many users are playing? "))
        while Users > 5:
            Users = int(input("How many users are playing? (at most 5 can play) "))
    except ValueError:
        Users = int(input("How many users are playing? (enter an integer) "))
        while Users > 5:
            Users = int(input("How many users are playing? (at most 5 can play) "))
    
    Players = {}
    for i in range(Users):
        Players["User " + str(i)] = 10 #for each number of users entered, creates a new object in a dictionary with the value 10
    return Players

def make_bets(Players): #asks if user is participating this round and if so, asks which symbol they're betting on and how much money they're betting
    UserBet = []
    for player, balance in sorted(Players.items()):
        if balance <= 0: #if the player has no money don't let them play
            break
        else:
            Participating = input("\n" + player + ", would you like to bet this round? Enter 'Yes' or 'No'. ") #checks if they're participating in the round
            while Participating != 'Yes' and Participating != 'yes' and Participating != 'No' and Participating != 'no':
                Participating = input("\nWould you like to bet this round? Enter 'Yes' or 'No'. ")
            if Participating == "No" or Participating == "no":
                bet = {}
                UserBetSy = "None"
                UserBetMo = 0
                bet[UserBetSy] = UserBetMo
                UserBet.append(bet)
                continue
            else: #if they are participating, do the following
                bet = {}
                UserBetSy = True
                while UserBetSy == True: #collect the symbol they are betting on
                    UserBetSy = input("\nWhich symbol would you like bet on? (hearts, spades, diamonds, clubs, crowns, anchors). Enter full symbol in lowercase (e.g., 'hearts')\n")
                    while UserBetSy != 'hearts' and UserBetSy != 'spades' and UserBetSy != 'diamonds' and UserBetSy != 'clubs' and UserBetSy != 'crowns' and UserBetSy != 'anchors':
                        UserBetSy = input("Which symbol would you like bet on? Please choose only the available symbols and write in lowercase.\n")

                try:
                    UserBetMo = int(input("How much money would you like to bet?\n")) #collect the amount of money they want to bet
                except ValueError:
                    UserBetMo = int(input("How much money would you like to bet? (enter an integer)\n")) #catch if they don't enter an integer
                while UserBetMo > balance:
                    UserBetMo = int(input("How much money would you like to bet?\n")) #catch if they enter an amount larger that what's in their balance
                
                bet[UserBetSy] = UserBetMo
                UserBet.append(bet) #creates a list of dictionaries, with each dictionary being a bet a user made
                continue
    return UserBet

def rand_slot(): #generates a random slot of symbols used in Crown & Anchor
    options = ['hearts', 'spades', 'diamonds', 'clubs', 'crowns', 'anchors']
    slot1 = random.choice(options) 
    slot2 = random.choice(options)
    slot3 = random.choice(options)
    bigSlot = [slot1, slot2, slot3] #creates the 3-symbol slot of randomly generated symbols
    print("The random slot is", bigSlot, "\n")
    return bigSlot

def counting(UserBet, bigSlot): #counts the number of times a user's bet equals the slot of random symbols generated
    occurances = []
    for i in range(len(UserBet)):
        for symbol in UserBet[i].keys():
            if symbol == None:
                break
            else:
                value = symbol
                counter = 0
                for j in range(len(bigSlot)):
                    if value == bigSlot[j]: #checks the number of times each round a user's symbol bet matches what was generated in the random slot
                        counter += 1
                        continue
                    else:
                        continue
        occurances.append(counter) #creates a list of the number of times there was a match
    return occurances
               
def calculation_winnings(UserBet, Players, occurances): #calculates how much each player won and what their new balance is, and prints this information
    playerTurn = -1
    for player, balance in Players.items():
        playerTurn += 1 
        for symbol, amount in UserBet[playerTurn].items(): #iterates through the dictionary of players and list of dictionaries of each user's bet
            if occurances[playerTurn] == 0: #checks the number of times there was a match between the symbol bet and random slot generated
                win = occurances[playerTurn] * amount #creates a variable that collects how much money a user won
                balance -= amount
                print(player, "won", win)
                print(player, "has a balance of", balance, "\n")
            elif occurances[playerTurn] == 1:
                win = occurances[playerTurn] * amount
                balance += win
                print(player, "won", win)
                print(player, "has a balance of", balance, "\n")
            elif occurances[playerTurn] == 2:
                win = occurances[playerTurn] * amount
                balance += win
                print(player, "won", win)
                print(player, "has a balance of", balance, "\n")
            else:
                win = occurances[playerTurn] * amount
                balance += win
                print(player, "won", win)
                print(player, "has a balance of", balance, "\n")
            continue

def calculation_players(UserBet, Players, occurances): #calculates how much the user won, uses this to change their balance and puts this new balance in place for the old balance, to allow an updated Players dictionary to be used throughout the program
    playerTurn = -1
    for player, balance in Players.items():
        playerTurn += 1 
        for symbol, amount in UserBet[playerTurn].items():
            if occurances[playerTurn] == 0:
                win = occurances[playerTurn] * amount
                balance -= amount #updates a user's balance based on the results of the last round
            elif occurances[playerTurn] == 1:
                win = occurances[playerTurn] * amount
                balance += win
            elif occurances[playerTurn] == 2:
                win = occurances[playerTurn] * amount
                balance += win
            else:
                win = occurances[playerTurn] * amount
                balance += win
            continue
        Players[player] = balance #updates the dictionary of containing each user and their balance
    return Players

def repeat(Players, UserBet, bigSlot, occurances): #asks the user if they want to quit the game and if not, continues playing the game
    EndGame = input("Enter any character if you want to continue playing. Enter 'Q' if you want to quit the game. ")
    if EndGame == 'Q' or EndGame == 'q':
        print("\nThanks for playing! Game ended.")
        return
    else:
        UserBet = make_bets(Players)
        bigSlot = rand_slot()
        occurances = counting(UserBet, bigSlot)
        calculation_winnings(UserBet, Players, occurances)
        Players = calculation_players(UserBet, Players, occurances)
        
        repeat(Players, UserBet, bigSlot, occurances) #continues executing the entire game until the user quits

main()
